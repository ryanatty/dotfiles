"vim:fdm=marker

" Settings -------------------------------------------------------------

" Preamble {{{

" Make vim more useful {{{
set nocompatible
" }}}

" Syntax highlighting {{{
set t_Co=256
set background=dark
syntax on
colorscheme molotov
" }}}

" Mapleader {{{
let mapleader=","
" }}}

" Local directories {{{
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo
" }}}

" Set some junk {{{
set autoindent " Copy indent from last line when starting new line
set backspace=indent,eol,start
set cursorline " Highlight current line
set diffopt=filler " Add vertical spaces to keep right and left aligned
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set encoding=utf-8 nobomb " BOM often causes trouble
set esckeys " Allow cursor keys in insert mode
set expandtab " Expand tabs to spaces
set foldcolumn=0 " Column to show folds
set foldenable " Enable folding
set foldlevel=0 " Close all folds by default
set foldmethod=syntax " Syntax are used to specify folds
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level
set formatoptions=
set formatoptions+=c " Format comments
set formatoptions+=r " Continue comments by default
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=n " Recognize numbered lists
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=1 " Break before 1-letter words
set gdefault " By default add g flag to search/replace. Add g to toggle
set hidden " When a buffer is brought to foreground, remember undo history and marks
set history=1000 " Increase history from 20 default to 1000
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set incsearch " Highlight dynamically as pattern is typed
set laststatus=2 " Always show status line
set lazyredraw " Don't redraw when we don't have to
set lispwords+=defroutes " Compojure
set lispwords+=defpartial,defpage " Noir core
set lispwords+=defaction,deffilter,defview,defsection " Ciste core
set lispwords+=describe,it " Speclj TDD/BDD
set magic " Enable extended regexes
set mouse=a " Enable mouse in all in all modes
set noerrorbells " Disable error bells
set nojoinspaces " Only insert single space after a '.', '?' and '!' with a join command
set noshowmode " Don't show the current mode (airline.vim takes care of us)
set nostartofline " Don't reset cursor to start of line when moving around
set nowrap " Do not wrap lines
set nu " Enable line numbers
set ofu=syntaxcomplete#Complete " Set omni-completion method
" set regexpengine=1 " Use the old regular expression engine (it's faster for certain language syntaxes)
set report=0 " Show all changes
set ruler " Show the cursor position
set scrolloff=3 " Start scrolling three lines before horizontal border of window
set shell=/bin/sh " Use /bin/sh for executing shell commands
set shiftwidth=2 " The # of spaces for indenting
set shortmess=atI " Don't show the intro message when starting vim
set showtabline=2 " Always show tab bar
set sidescrolloff=3 " Start scrolling three columns before vertical border of window
set smartcase " Ignore 'ignorecase' if search patter contains uppercase characters
set smarttab " At start of line, <Tab> inserts shiftwidth spaces, <Bs> deletes shiftwidth spaces
set softtabstop=2 " Tab key results in 2 spaces
set splitbelow " New window goes below
set splitright " New windows goes right
set suffixes=.bak,~,.swp,.swo,.o,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll
set switchbuf=""
set title " Show the filename in the window titlebar
set ttyfast " Send more characters at a given time
set ttymouse=xterm " Set mouse type to xterm
set undofile " Persistent Undo
set viminfo=%,'9999,s512,n~/.vim/viminfo " Restore buffer list, marks are remembered for 9999 files, registers up to 512Kb are remembered
set visualbell " Use visual bell instead of audible bell (annnnnoying)
set wildchar=<TAB> " Character for CLI expansion (TAB-completion)
set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/bower_components/*,*/node_modules/*
set wildignore+=*/smarty/*,*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*
set wildmenu " Hitting TAB in command mode will show possible completions above command line
set wildmode=list:longest " Complete only until point of ambiguity
set winminheight=0 " Allow splits to be reduced to a single line
set wrapscan " Searches wrap around end of file
" }}}

" }}}

" Configuration
" -------------------------------------------------------------

" FastEscape {{{
" Speed up transition from modes
if ! has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif
" }}}

" General {{{
augroup general_config
  autocmd!
  
  " Speed up viewport scrolling {{{
    nnoremap <C-e> 3<C-e>
    nnoremap <C-y> 3<C-y>
  " }}}

  " Toggle show tabs and trailing spaces (,c) {{{
    set lcs=tab:›\ ,trail:·,eol:¬,nbsp:_
    set fcs=fold:-
    nnoremap <silent> <leader>c :set nolist!<CR>
  " }}}

  " Clear last search (,qs) {{{
    map <silent> <leader>qs <Esc>:noh<CR>
    " map <silent> <leader>qs <Esc>:let @/ = ""<CR>
  " }}}

  " Relative numbers {{{
  set relativenumber " Use relative line numbers. Current line is still in status bar.
  au BufReadPost,BufNewFile * set relativenumber
  " }}}
augroup END
" }}}

" NERD Commenter {{{
augroup nerd_commenter
  autocmd!

  let NERDSpaceDelims=1
  let NERDCompactSexyComs=1
  let g:NERDCustomDelimiters = { 'racket': { 'left': ';', 'leftAlt': '#|', 'rightAlt': '|#' } }
augroup END
" }}}

" Buffers {{{
augroup buffer_control
  autocmd!

  " Prompt for buffer to select (,bs) {{{
  nnoremap <leader>~ :CtrlPBuffer<CR>
  " }}}

  " Buffer navigation (,,) (gb) (gB) (,ls) {{{
  map <Leader>, <C-^>
  map <Leader>ls :buffers<CR>
  map gb :bnext<CR>
  map gB :bprev<CR>
  " }}}

  " Jump to buffer number (<N>gb) {{{
  let c = 1
  while c <= 99
    execute "nnoremap " . c . "gb :" . c . "b\<CR>"
    let c += 1
  endwhile
  " }}}

  " Close Quickfix window (,qq) {{{
  map <leader>qq :cclose<CR>
  " }}}
augroup END
" }}}

" NOT SURE
" -------------------------------------------------------------
filetype plugin on
" Default to tree mode
let g:netrw_liststyle=3


" Plugin Configuration
" -------------------------------------------------------------

" RainbowParenthesis.vim {{{
augroup rainbow_parenthesis_config
  autocmd!
  nnoremap <leader>rp :RainbowParenthesesToggle<CR>
augroup END
" }}}

" EasyAlign.vim {{{
augroup easy_align_config
  autocmd!
  vmap <Enter> <Plug>(EasyAlign) " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  nmap <Leader>a <Plug>(EasyAlign) " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
    augroup END
" }}}

" Plugins
" -------------------------------------------------------------

filetype off      " reuqired
set rtp+=~/.vim/bundle/Vundle.vim

" Load plugins {{{
call vundle#begin()

Plugin 'gmarik/Vundle.vim' " let Vundle manage Vundle
Plugin 'airblade/vim-gitgutter'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'kien/ctrlp.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tmhedberg/matchit'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'scrooloose/nerdcommenter'
Plugin 'junegunn/vim-easy-align'
Plugin 'ap/vim-css-color'

call vundle#end()
" }}}

" Filetypes -------------------------------------------------------------

" C {{{
augroup filetype_c
  autocmd!

    " Highlight Custom C Types {{{
      autocmd BufRead,BufNewFile *.[ch] let fname = expand('<afile>:p:h') . '/types.vim'
        autocmd BufRead,BufNewFile *.[ch] if filereadable(fname)
          autocmd BufRead,BufNewFile *.[ch]   exe 'so ' . fname
            autocmd BufRead,BufNewFile *.[ch] endif
              " }}}
              augroup END
              " }}}

              " Clojure {{{
              augroup filetype_clojure
                autocmd!
                  let g:vimclojure#ParenRainbow = 1 " Enable rainbow parens
                    let g:vimclojure#DynamicHighlighting = 1 " Dynamic highlighting
                      let g:vimclojure#FuzzyIndent = 1 " Names beginning in 'def' or 'with' to be indented as if they were included in the 'lispwords' option
                      augroup END
                      " }}}

                      " Coffee {{{
                      augroup filetype_coffee
                        autocmd!
                          au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
                          augroup END
                          " }}}

                          " Fish {{{
                          augroup filetype_fish
                            autocmd!
                              au BufRead,BufNewFile *.fish set ft=fish
                              augroup END
                              " }}}

                              " Handlebars {{{
                              augroup filetype_hbs
                                autocmd!
                                  au BufRead,BufNewFile *.hbs,*.handlebars,*.hbs.erb,*.handlebars.erb setl ft=mustache syntax=mustache
                                  augroup END
                                  " }}}

                                  " Jade {{{
                                  augroup filetype_jade
                                    autocmd!
                                      au BufRead,BufNewFile *.jade set ft=jade syntax=jade
                                      augroup END
                                      " }}}

                                      " JavaScript {{{
                                      augroup filetype_javascript
                                        autocmd!
                                          let g:javascript_conceal = 1
                                          augroup END
                                          " }}}

                                          " JSON {{{
                                          augroup filetype_json
                                            autocmd!
                                              au BufRead,BufNewFile *.json set ft=json syntax=javascript
                                              augroup END
                                              " }}}

                                              " Markdown {{{
                                              augroup filetype_markdown
                                                autocmd!
                                                  let g:markdown_fenced_languages = ['ruby', 'html', 'javascript', 'css', 'erb=eruby.html', 'bash=sh']
                                                  augroup END
                                                  " }}}

                                                  " Nu {{{
                                                  augroup filetype_nu
                                                    autocmd!
                                                      au BufNewFile,BufRead *.nu,*.nujson,Nukefile setf nu
                                                      augroup END
                                                      " }}}

                                                      " Ruby {{{
                                                      augroup filetype_ruby
                                                        autocmd!

                                                          au BufRead,BufNewFile Rakefile,Capfile,Gemfile,.autotest,.irbrc,*.treetop,*.tt set ft=ruby syntax=ruby

                                                            " Ruby.vim {{{
                                                              let ruby_operators = 1
                                                                let ruby_space_errors = 1
                                                                  let ruby_fold = 1
                                                                    " }}}
                                                                    augroup END
                                                                    " }}}

                                                                    " }}}
                                                                    " XML {{{
                                                                    augroup filetype_xml
                                                                      autocmd!
                                                                        au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"
                                                                        augroup END
                                                                        " }}}

                                                                        " ZSH {{{
                                                                        augroup filetype_zsh
                                                                          autocmd!
                                                                            au BufRead,BufNewFile .zsh_rc,.functions,.commonrc set ft=zsh
                                                                            augroup END
                                                                            " }}}

